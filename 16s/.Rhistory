axis.title.x = element_text(color="black", size=20,face="bold")) +
stat_ellipse(geom = "polygon", type="norm", alpha=0.25, aes(fill = Group)) + # polygon, path, point
scale_color_brewer(palette="Set2") +
scale_fill_brewer(palette="Set2")
# available measurements [c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")]
tab = cbind(x = sample_data(physeq.norm),
y = estimate_richness(physeq.norm, measures = 'Fisher'))
stat.test <- tab %>%
# group_by(Neutrophils, GROUP1) %>%
t_test(Fisher ~ x.Group) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance()
ggplot(data = tab, aes(x = x.Group, y = Fisher, color = x.Group, fill = x.Group)) +
theme_classic() +
labs(# title = "IBD Patients",
x = element_blank(),
y = "Alpha Diversity (Fisher)") +
geom_point(size = 1.75) +
geom_boxplot(alpha = 0.5) +
stat_pvalue_manual(stat.test,
y.position = c(245, 260, 280),
label = "p.adj.signif",
face="bold",
size = 6,
linetype = 1,
tip.length = 0.02,
inherit.aes = FALSE) +
scale_y_continuous(limits=c(0 , 285), breaks = c(0, 50, 100, 150, 200, 250)) +
theme(text = element_text(size=18, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black",
angle=0,
size = 13, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black",
size = 13, face="bold"),
axis.title.y = element_text(color="black", size=15,face="bold"),
legend.position = "none") +
scale_color_brewer(palette="Dark2")+
scale_fill_brewer(palette="Dark2")
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order",
"Family", "Genus", "Species")
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.norm.group)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.norm.group), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% purrr::reduce(dplyr::full_join, by = "name")
# Set row names and column names
rownames(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
B2$name <- rownames(B2)
# Print the resulting data frame
print(B2)
# Clean up by removing unnecessary objects
rm(gentab_levels, BB)
data_long <- melt(B2, id.vars = "name", variable.name = "Dataset", value.name = "Count")
colnames(data_long) = c("Method","Taxonomic.Level","Count")
ggplot(data_long, aes(x = Taxonomic.Level, y = Count, color = Method, group = Method)) +
geom_line(size = 2) +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count", color = "Method") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Define the taxonomic levels
genus_levels <- c("Kingdom","Phylum", "Class", "Order",
"Family", "Genus", "Species")
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.norm.group)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.norm.group), MARGIN = 0, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.norm.group)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.norm.group), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Define the taxonomic levels
genus_levels <- c("Kingdom","Phylum", "Class", "Order",
"Family", "Genus", "Species")
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.norm.group)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.norm.group), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Kingdom","Phylum", "Class", "Order",
"Family", "Genus", "Species")
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.norm.group)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.norm.group), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% purrr::reduce(dplyr::full_join, by = "name")
View(B2)
# Set row names and column names
rownames(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
B2$name <- rownames(B2)
# Print the resulting data frame
print(B2)
physeq
tax_table(physeq)
View(tax_table(physeq))
ggplot(data_long, aes(x = Taxonomic.Level, y = Count, color = Method, group = Method)) +
geom_line(size = 2) +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count", color = "Method") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = Taxonomic.Level, y = Count, color = Method, group = Method)) +
geom_line(size = 2) +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count", color = "Method") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=100))
ggplot(data_long, aes(x = Taxonomic.Level, y = Count, color = Method, group = Method)) +
geom_line(size = 2) +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count", color = "Method") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,600,by=100))
metdat = as.data.frame(as.matrix(physeq.norm@sam_data))
dat = as.data.frame(t(as.data.frame(physeq.norm@otu_table)))
pairwise.adonis(dat, metdat$Group, sim.function = "vegdist",
sim.method = "bray", p.adjust.m = "bonferroni",
reduce = NULL, perm = 100000)
# Create an empty data frame to store the results
result_df <- data.frame(Comparison = character(), Group = character(), Lost = integer())
# Define the combinations of groups to remove
combinations <- list(
list(Comparison = "Control vs Plunge", Group = "Plunge", Other_Group = "Control"),
list(Comparison = "Plunge vs Rate", Group = "Rate", Other_Group = "Plunge"),
list(Comparison = "Control vs Rate", Group = "Rate", Other_Group = "Control")
)
# Iterate over each combination
for (i in 1:length(combinations)) {
comp <- combinations[[i]]
# Subset the samples
physeq.norm.cp <- subset_samples(physeq.norm, (Group %in% c(comp$Group, comp$Other_Group)))
# Run DESeq2 analysis
diagdds <- phyloseq_to_deseq2(physeq.norm.cp, ~ Group)
diagdds <- DESeq(diagdds, test = "Wald", fitType = "parametric")
res <- results(diagdds, cooksCutoff = FALSE)
sigtab <- cbind(as(res, "data.frame"), as(tax_table(physeq.norm.cp)[rownames(res), ], "matrix"))
# Filter for significant features
List2 <- filter(sigtab, padj < 0.05 & log2FoldChange < -1)
List2.num <- nrow(List2)
List3 <- filter(sigtab, padj < 0.05 & log2FoldChange > 1)
List3.num <- nrow(List3)
# Add the results to the main data frame
result_df <- rbind(result_df,
data.frame(Comparison = comp$Comparison, Group = comp$Group, Lost = List2.num),
data.frame(Comparison = comp$Comparison, Group = comp$Other_Group, Lost = List3.num)
)
}
# Print the final result data frame
print(result_df)
ggplot(result_df, aes(x = factor(Comparison), y = Lost, fill = Group, colour = Group)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.5)  +
# geom_errorbar(aes(ymin=target, ymax=target), position = position_dodge(0.9), width = 0.25,
#               show.legend = FALSE) +
labs(x="Comparsion", y="Number of Taxa") +
theme_bw() +
theme(text = element_text(size=18, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black",
angle=0,
size = 13, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black",
size = 13, face="bold"),
axis.title.y = element_text(color="black", size=15,face="bold"),
axis.title.x = element_text(color="black", size=15,face="bold"),
legend.position = "none") +
scale_y_continuous(limits=c(0, 125), breaks = c(0, 25, 50, 75, 125)) +
geom_text(aes(label=Group, y = 3),
position = position_dodge(0.90),
show.legend = FALSE) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2")
# Merge reads by groups
AyBCode <- merge_samples(physeq, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:15])
taxtab10 = cbind(tax_table(AyBCode.percent), family19 = NA)
taxtab10[top10otus, "family19"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (ITS)"
plot_bar(restroomRm19, fill = "family19") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 60) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
plot_bar(top10plot, fill = "family19") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 60) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
# Merge reads by groups
AyBCode <- merge_samples(physeq, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:15])
taxtab10 = cbind(tax_table(AyBCode.percent), family19 = NA)
taxtab10[top10otus, "family19"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (ITS)"
plot_bar(top10plot, fill = "family19") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 50) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
# Merge reads by groups
AyBCode <- merge_samples(physeq, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:16])
taxtab10 = cbind(tax_table(AyBCode.percent), family19 = NA)
taxtab10[top10otus, "family19"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (ITS)"
plot_bar(top10plot, fill = "family19") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 50) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
# Merge reads by groups
AyBCode <- merge_samples(physeq, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:15])
taxtab10 = cbind(tax_table(AyBCode.percent), family19 = NA)
taxtab10[top10otus, "family19"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (ITS)"
plot_bar(top10plot, fill = "family19") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 50) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
# Merge reads by groups
AyBCode <- merge_samples(physeq, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:15])
taxtab10 = cbind(tax_table(AyBCode.percent), Family = NA)
taxtab10[top10otus, "Family"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (ITS)"
plot_bar(top10plot, fill = "Family") + coord_flip() +
ylab("Taxa Matched with UNITE (%)") + ylim(0, 50) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
setwd("~/GitHub/Cryopreservation-Stirling-Cycle/16s")
# Convert qiime2 to phyloseq format
physeq <- qza_to_phyloseq(
features = "qiime2/430_327_213_table-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
# tree = "inst/artifacts/2020.2_moving-pictures/rooted-tree.qza",
taxonomy = "qiime2/430_327_213_taxonomy.qza",
metadata = "16s-meta-data.txt"
)
physeq ## confirm the object
## Normalise number of reads in each sample by using median sequencing depth
total <- median(sample_sums(physeq)) # Calculate the median sequencing depth
standf <- function(x, t = total) round(t * (x / sum(x))) # Define a scaling function
physeq.norm <- transform_sample_counts(physeq, standf) # Normalise the sample counts using the scaling function
## Subgroup
physeq.norm.ori <- subset_samples(physeq.norm, Comparison=="Original")
physeq.norm.rich <- subset_samples(physeq.norm, Comparison=="Enriched")
## (3A) Merge the replicate samples for each Group
physeq.norm.ori.group = merge_samples(physeq.norm.ori, "Group2") # Sum between replicate samples
sample_data(physeq.norm.ori.group)$Group2 <- rownames(sample_data(physeq.norm.ori.group))
physeq.norm.rich.group = merge_samples(physeq.norm.rich, "Group2") # Sum between replicate samples
sample_data(physeq.norm.rich.group)$Group2 <- rownames(sample_data(physeq.norm.rich.group))
# Merge reads by groups (Original)
physeq.ori <- subset_samples(physeq, Comparison=="Original")
AyBCode <- merge_samples(physeq.ori, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:26])
taxtab10 = cbind(tax_table(AyBCode.percent), Family = NA)
taxtab10[top10otus, "Family"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (16s - Original)"
plot_bar(top10plot, fill = "Family") + coord_flip() +
ylab("Taxa Matched with Silva138 (%)") + ylim(0, 20) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
# Merge reads by groups (Enriched)
physeq.rich <- subset_samples(physeq, Comparison=="Enriched")
AyBCode <- merge_samples(physeq.rich, "Group", fun = sum)
## Normalised number of reads in percentage
standf = function(x) x / sum(x) * 100
AyBCode.percent = transform_sample_counts(AyBCode, standf)
top10otus = names(sort(taxa_sums(AyBCode.percent), TRUE)[1:23])
taxtab10 = cbind(tax_table(AyBCode.percent), Family = NA)
taxtab10[top10otus, "Family"] <- as(tax_table(AyBCode.percent)[top10otus, "Family"],"character")
tax_table(AyBCode.percent) <- tax_table(taxtab10)
top10plot = prune_taxa(top10otus, AyBCode.percent)
top10plot
title = "The 10 most abundant taxa (16s - Enriched)"
plot_bar(top10plot, fill = "Family") + coord_flip() +
ylab("Taxa Matched with Silva138 (%)") + ylim(0, 100) +
theme_classic() +
theme(text = element_text(size=14, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle=0, size = 11, face="bold"),
axis.text.y = element_text(angle=0, hjust=0, colour = "black", size = 11, face="bold"),
axis.title.y = element_text(color="black", size=12,face="bold"),
axis.title.x = element_text(color="black", size=12,face="bold"),
legend.position = "right") +
scale_color_brewer(palette="Spectral")+
scale_fill_brewer(palette="Spectral")
